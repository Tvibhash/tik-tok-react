{"version":3,"sources":["Box.js","Board.js","serviceWorker.js","index.js"],"names":["Box","handleClick","bind","this","props","id","split","row","col","updateBoard","onClick","className","value","React","Component","Board","board","i","push","state","turn","winner","gameBoard","setState","checkWinner","box","count","j","map","arr","ele","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAkBeA,G,wDAfX,aAAc,IAAD,8BACT,gBACKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFV,E,0DAKC,IAAD,EACQC,KAAKC,MAAMC,GAAGC,MAAM,KAD5B,mBACHC,EADG,KACCC,EADD,KAETL,KAAKC,MAAMK,YAAYF,EAAIC,K,+BAG3B,OACA,yBAAKE,QAASP,KAAKF,YAAaU,UAAU,OAAOR,KAAKC,MAAMQ,W,GAZlDC,IAAMC,YCsFTC,E,kDAnFb,aAAc,IAAD,sBACX,eAEA,IADA,IAAIC,EAAQ,GACJC,EAAG,EAAEA,EAAE,EAAEA,IACfD,EAAME,KAAK,CAAC,GAAG,GAAG,KAJT,OAMX,EAAKC,MAAQ,CACXH,MAAMA,EACNI,KAAK,EACLC,OAAO,KAET,EAAKZ,YAAc,EAAKA,YAAYP,KAAjB,gBAXR,E,wDAaDK,EAAIC,GAAK,IAAD,OACdc,EAAYnB,KAAKgB,MAAMH,MAC3B,GAAyB,KAAtBM,EAAUf,GAAKC,IAAiC,MAApBL,KAAKgB,MAAME,OAA1C,CAGA,IAAID,EAAOjB,KAAKgB,MAAMC,KACC,IAApBjB,KAAKgB,MAAMC,MACZE,EAAUf,GAAKC,GAAK,IACpBY,EAAO,IAEPE,EAAUf,GAAKC,GAAO,IACtBY,EAAO,GAETjB,KAAKoB,SAAS,CACZP,MAAMM,EACNF,KAAKA,IAEP,WACE,EAAKG,SAAS,CACZF,OAAO,EAAKG,YAAY,EAAKL,MAAMH,e,kCAM7BS,GACV,IAAI,IAAIR,EAAG,EAAEA,EAAE,EAAEA,IAAI,CACnB,GAAGQ,EAAI,GAAGR,KAAOQ,EAAI,GAAGR,IAAMQ,EAAI,GAAGR,KAAOQ,EAAI,GAAGR,IAAoB,KAAdQ,EAAI,GAAGR,IAA2B,KAAdQ,EAAI,GAAGR,IAA2B,KAAdQ,EAAI,GAAGR,GACtG,OAA2B,IAApBd,KAAKgB,MAAMC,KAAa,IAAM,IAEzC,GAAGK,EAAIR,GAAG,KAAOQ,EAAIR,GAAG,IAAMQ,EAAIR,GAAG,KAAOQ,EAAIR,GAAG,IAAoB,KAAdQ,EAAIR,GAAG,IAA2B,KAAdQ,EAAIR,GAAG,IAA2B,KAAdQ,EAAIR,GAAG,GACpG,OAA2B,IAApBd,KAAKgB,MAAMC,KAAa,IAAM,IAG3C,GAAGK,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAMA,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAoB,KAAdA,EAAI,GAAG,IAA2B,KAAdA,EAAI,GAAG,IAA2B,KAAdA,EAAI,GAAG,GACtG,OAA2B,IAApBtB,KAAKgB,MAAMC,KAAa,IAAM,IAEvC,GAAGK,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAMA,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAoB,KAAdA,EAAI,GAAG,IAA2B,KAAdA,EAAI,GAAG,IAA2B,KAAdA,EAAI,GAAG,GACtG,OAA2B,IAApBtB,KAAKgB,MAAMC,KAAa,IAAM,IAGvC,IADE,IAAIM,EAAO,EACLT,EAAI,EAAEA,EAAE,EAAEA,IAChB,IAAI,IAAIU,EAAE,EAAEA,EAAE,EAAEA,IACC,KAAZF,EAAIR,GAAGU,IACRD,IAIJ,OAAY,GAATA,EAAmB,OACjB,M,+BAEE,IAAD,OACN,OACE,yBAAKf,UAAU,SACQ,MAApBR,KAAKgB,MAAME,OAAa,2CAAqB,yCAAelB,KAAKgB,MAAME,QACxE,yBAAKV,UAAU,iBAEXR,KAAKgB,MAAMH,MAAMY,KAAI,SAACC,EAAIZ,GACxB,OAAOY,EAAID,KAAI,SAACE,EAAIH,GAClB,OAAO,kBAAC,EAAD,CAAKf,MAAOkB,EAAKC,IAAG,UAAKd,EAAL,YAAUU,GAAKtB,GAAE,UAAKY,EAAL,YAAUU,GAAKlB,YAAc,EAAKA,0B,GAzE1EI,IAAMC,WCQNkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ecd9cfb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Box.css';\r\nclass Box extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.handleClick = this.handleClick.bind(this);\r\n\r\n    }\r\n    handleClick(){\r\n        const[row,col] = this.props.id.split('-');\r\n        this.props.updateBoard(row,col);\r\n    }\r\n    render(){\r\n        return(\r\n        <div onClick={this.handleClick} className='box'>{this.props.value}</div>\r\n        )\r\n    }\r\n}\r\nexport default Box","import React from 'react';\n\nimport './App.css';\nimport Box from './Box';\nclass Board extends React.Component{\n  constructor(){\n    super();\n    let board = [];\n    for(let i =0;i<3;i++){\n      board.push(['','','']);\n    }\n    this.state = {\n      board:board,\n      turn:0,\n      winner:'p'\n    }\n    this.updateBoard = this.updateBoard.bind(this);\n  }\n  updateBoard(row,col){\n    let gameBoard = this.state.board;\n    if(gameBoard[row][col]!=='' || this.state.winner!=='p'){\n      return;\n    }\n    let turn = this.state.turn;\n    if(this.state.turn === 0){\n      gameBoard[row][col]='O';\n      turn = 1;\n    } else{\n      gameBoard[row][col] = 'X';\n      turn = 0;\n    }\n    this.setState({\n      board:gameBoard,\n      turn:turn,\n    },\n    ()=>{\n      this.setState({\n        winner:this.checkWinner(this.state.board)\n      })\n    }\n    );\n\n  }\n  checkWinner(box){\n    for(let i =0;i<3;i++){\n      if(box[0][i] === box[1][i] && box[1][i] === box[2][i] && box[0][i] !== '' && box[1][i] !== '' && box[2][i] !== '')\n        return this.state.turn === 1 ? 'O' : 'X';\n    \n    if(box[i][0] === box[i][1] && box[i][1] === box[i][2] && box[i][0] !== '' && box[i][1] !== '' && box[i][2] !== '')\n        return this.state.turn === 1 ? 'O' : 'X';\n    }\n  \n  if(box[0][0] === box[1][1] && box[1][1] === box[2][2] && box[0][0] !== '' && box[1][1] !== '' && box[2][2] !== '')\n    return this.state.turn === 1 ? 'O' : 'X';\n  \n  if(box[0][2] === box[1][1] && box[1][1] === box[2][0] && box[0][2] !== '' && box[1][1] !== '' && box[2][0] !== '')\n    return this.state.turn === 1 ? 'O' : 'X';\n  \n    let count =0;\n  for(let i = 0;i<3;i++){\n    for(let j=0;j<3;j++){\n      if(box[i][j]!==''){\n        count++;\n      }\n    }\n  }\n    if(count == 9) return 'none';\n  return 'p';\n  }\n  render(){\n    return(\n      <div className='board'>\n        {this.state.winner==='p'?<h1>Tic-Tac-Toe</h1>:<h1>Winner is {this.state.winner}</h1>}\n        <div className='box_container'>\n          {\n            this.state.board.map((arr,i)=>{\n              return arr.map((ele,j)=>{\n                return <Box value={ele} key={`${i}-${j}`} id={`${i}-${j}`} updateBoard ={this.updateBoard}/>\n              })\n            })\n          }\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <Board />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}